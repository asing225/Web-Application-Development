<!--
   Lab 1 solution build.xml file for SER422 Fall 2009.
   Copyright 2008 Kevin A. Gary
-->

<project name="PhonefullMVCSub" default="compile" basedir=".">
  <property file="build.properties"/>

  <!-- init target makes the directory structure. You may not
       require this if you set your environment up by hand. -->
  <target name="init">
    <tstamp/>
    <mkdir dir="${classes.dir}"/>
  </target>

  <!-- Compiles your java files and puts the classes in classes.dir -->
  <target name="compile" depends="init">
    <javac debug="true" includeantruntime="false"
      srcdir="${src.dir}"
      destdir="${classes.dir}">
      <!-- Make sure you set your classpath! -->
      <classpath>
        <fileset dir="${tomcat.home}/lib" includes="servlet-api.jar"/>
        <pathelement path="${classes.dir}" />
      </classpath>
    </javac>
  </target>

  <!-- The deploy target will be highly dependent on your deployed app.
       For example, if you are building a web-app, you should include
       commands to copy files over to your deploy directory according
       to the servlet specification, or create a .war file (via dist)
       and copy it over. If you are creating a standalone app (like this
       example does), you can create it in a given directory, or create
       your dist jar first that can be run using java -jar. -->
  <target name="deploy" depends="dist">
    <copy file="${dist.jar}" todir="${tomcat.home}/webapps" overwrite="yes"/>
  </target>
      
  <target name="build" depends="compile">
    <mkdir dir="${build.home}"/>
    <mkdir dir="${build.home}/WEB-INF"/>
    <copy todir="${build.home}/WEB-INF">
      <fileset dir="." includes="${classes.dir}/**,${lib.dir}/**" excludes="${classes.dir}/driver/**"/>
    </copy>
  	<copy file="README.txt" tofile="${build.home}/README.txt"/>
  	<copy file="index.html" tofile="${build.home}/index.html"/>
  	<copy file="error.html" tofile="${build.home}/error.html"/>
  	<copy file="noSuchNum.html" tofile="${build.home}/noSuchNum.html"/>
  	<copy file="noEntry.jsp" tofile="${build.home}/noEntry.jsp"/>
  	<copy file="invalidAction.jsp" tofile="${build.home}/invalidAction.jsp"/>
  	<copy file="listAll.jsp" tofile="${build.home}/listAll.jsp"/>
  	<copy file="remove.jsp" tofile="${build.home}/remove.jsp"/>
  	<copy file="success.html" tofile="${build.home}/success.html"/>
    <copy file="web.xml" tofile="${build.home}/WEB-INF/web.xml"/>
  	<copy file="resources/phonebook.txt" tofile="${build.home}/WEB-INF/classes/resources/phonebook.txt"/>
  	<copy file="resources/phonebook.properties" tofile="${build.home}/WEB-INF/classes/resources/phonebook.properties"/>
  	<copy file="resources/mysqlSetup.txt" tofile="${build.home}/WEB-INF/classes/resources/mysqlSetup.txt"/>
  	<copy file="resources/rdbm.properties" tofile="${build.home}/WEB-INF/classes/resources/rdbm.properties"/>
  </target>
    
  <!-- This example dist target merely jars up the webapp files. -->
  <target name="dist" depends="build">
    <jar destfile="${dist.jar}" basedir="${build.home}">
    </jar>
  </target>

  <!-- submit creates a single jarfile that you will upload to the
       Gradebook channel on the class portal. -->
  <target name="submit" depends="dist">
    <jar destfile="${submit.jar}" basedir="." includes="README.txt,build.properties,build.xml,web.xml,${src.dir}/**,${docs.dir}/**,${javadoc.dir}/**,${properties.dir}/**,${lib.dir}/**,${classes.dir}/**">
     </jar>
  </target>

  <!-- Clean -->
  <target name="clean">
    <delete file="${dist.jar}"/>
    <delete dir="${build.home}"/>
    <delete dir="${classes.dir}"/>
  </target>

  <!-- Clean all -->
  <target name="cleanall" depends="clean">
    <delete file="${submit.jar}"/>
  </target>

</project>
  

